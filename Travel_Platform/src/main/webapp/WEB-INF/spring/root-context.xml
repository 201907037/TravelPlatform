<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- 
		* root-context.xml 파일
		서버 구동과 동시에 web.xml 파일을 거쳐서 바로 로딩되는 문서
		서버 구동과 동시에 바로 세팅해야하는 내용들을 bean 형식으로 등록
		주로 DB 연결과 관련된 설정, 트랜잭션 관련 설정, 내외부 모듈 연동 등등
		
		> 읽혀지는 순서 : 2번
	 -->
	 
	 <!-- DB 연결 설정 3 단계 (+ mybatis-config.xml 파일) -->
	 <!-- 1단계. DB 연결을 위한 bean 등록 -->
	 <!-- 
	 	- bean
	 	스프링에서 자동으로 객체 생성이 가능한 클래스라고 부름 (bean == 도구)
	 	bean 을 등록할 경우 내부적으로 필요할 때 마다 해당 객체를 자동으로
	 	스프링이 생성해서 개발자인 나에게 던져줌 (가져다 쓰기만 하면 됨)
	 	(즉, 개발자인 내가 new 구문을 직접 쓸일이 거의 없을 것)
	 	
	 	- bean 등록 방법
	 	1. xml 파일을 이용하여 빈을 등록하는 방식
	 	bean 태그의 class 속성과 id 속성을 조합해서 설정 가능함
	 	> class : 등록할 클래스의 풀 클래스명
	 	> id : 객체를 생성해줄때의 객채명 (생략 시 해당 클래스명의 맨 첫 글자가 소문자로 생성됨)
	  	> destroy-method : 객체 다 사용한 후 자원반납해주겠다.
	  	- 선배 개발자들이 만들어준 (남이 만들어준) 클래스를
	  	  빈으로 등록하고 싶을 경우에 무조건 써야 함
	  	
	  	2. 어노테이션을 이용하여 빈을 등록하는 방식
	  	클래스 선언부 상단에 @Component, @Controller 등의
	  	어노테이션을 붙이기만 하면 바로 빈으로 등록되는 방식
	  	- 내가 만든 자바 클래스를 빈으로 등록하고 싶을 경우에만 사용 가능
	  	
	  	1번 방식이든, 2번 방식이든 간에
	  	내가 등록한 빈은 내가 필요할 때마다 스프링이 알아서 객체를 생성해줄 것임
	  	이때 생성된 객체는 "스프링 컨테이너" 라는 메모리 공간에 생성됨
	  	(컨테이너 == 상자)
	  -->
	 <bean class="org.apache.commons.dbcp.BasicDataSource" 
	 	   id="dataSource"
	 	   destroy-method="close">
	 	   <!-- 
	 	   	어느 DB 에 접속할건지를 필드값으로 지정하면됨 
	 	   	기존에는 이 설정을 mybatis-config.xml 에서 설정했지만
	 	   	스프링에서는 스프링이 알아야 하는 기본정보이기 때문에
	 	   	root-context.xml 에 기술해야함!!
	 	   -->
	 	<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
	 	<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
	 	<property name="username" value="TRAVELY"/>
	 	<property name="password" value="TRAVELY"/>
	 </bean>	
	 
	 <!-- 
		이 객체가 필요할 때마다 내부적으로
		BasicDataSource basicSource = new BasicDataSource();
		basicSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
		basicSource.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
		basicSource.setUsername("SPRING");
		basicSource.setUPassword("SPRING");
		
		기본생성자 + setter 메소드 호출로 해당 객체를 생성해줌(setter 주입)
	 -->
	 
	 <!-- 2단계. MyBatis Spring 에서 제공하는 SQL 명령어 실행을 위한 bean 등록 -->
	 <!-- 
	 	SqlSession 객체의 역할을 해주는 빈을 등록
	 	순수 마이바티스 이용시 : SqlSession 객체 이용
	 	(SqlSessionFactoryBuilder > SqlSessionFactory > SqlSession)
	 	Spring 에 마이바티스 연동 시 : SqlSessionTemplate 객체 이용
	 	(SqlSessionFactoryBean > SqlSessionTemplaate)
	  -->
	  <bean class="org.mybatis.spring.SqlSessionFactoryBean" 
	  		id="sqlSessionFactory">
	  		<!--
	  			 MyBatis 설정파일의 위치를 지정 (myBatis-config.xml)
	  			 classpath: 가 resources 폴더를 의미함
	  		-->
	  		<property name="configLocation" value="classpath:mybatis-config.xml"/>
	  		<!-- 연결을 위한 객체를 참조해오기 -->
	  		<property name="dataSource" ref="dataSource"></property>
	  </bean>
	  
	  <!-- 
	  	객체가 필요할 때 마다 내부적으로 아래의 코드가 실행됨
	  	SqlSessionFactoryBean sqlSessionFactory
	  	  = new SqlSessionFactroyBean(); // 기본생성자
	  	sqlSessionFactory.setConfigLocation("classpath:mybatis-config.xml")
	  	sqlSessionFactroy.setDataSource(dataSource);
	   -->
		
	  <!-- 3단계. SQL 구문 실행을 위한 템플릿을 제공하는 객체등록 -->
	  <!-- SqlSessionTemplate 객체 (기존 SqlSession 역할) -->
	  <bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		  	<!-- 2단계에서 등록을 한 빈을 참조하겠다. -->
		  	<constructor-arg ref="sqlSessionFactory"/>
	  </bean>
	  <!-- 
	  	해당 객체가 필요할 때마다 아래의 코드가 실행됨
	  	
	  	SqlSessionTemplate sqlSession
	  		= new SqlSessionTemplate(sqlSessionFactory);
	  		// 매개변수 생성자 (생성자 주입)
	   -->
	   
	   <!-- 트랜잭션 관리를 위한 빈 등록 -->
	   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
   	   </bean>
	   
	   <!-- @Transactional 어노테이션 활성화 -->
   	   <tx:annotation-driven transaction-manager="transactionManager"/>
   	   
   	   <!-- 파일 업로드 관련 빈 등록 -->
   	   <bean id="multipartResolver" 
   	   		 class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	   	   	<!-- 
	   	   		defaultEncoding : 업로드 되는 파일에 대한 인코딩 처리는 어떻게 할건지 지정 
	   	   	-->
	   	   	<property name="defaultEncoding" value="UTF-8"></property>
	   	   	
	   	   	<!-- 
	   	   		maxUploadSize : 한번에 전체 업로드 되는 파일의 총 용량 
	   	   	
	   	   		- 총 파일의 최대용량은 10MByte 로 지정
	   	   		10MByte == 10 * 1024 * 1024
	   	   		
	   	   		int maxSize = 10 * 1024 * 1024; // 기존
	   	   		
	   	   		단, xml 에서는 계산식이 적용되지 않으므로
	   	   		직접 계산한 결과값을 넣어야함!!
	   	   		계산 결과 : 10,485,760 > 대략 10,000,000 으로 넣자
	   	   	-->
	   	   	<property name="maxUploadSize" value="10000000"/>
   	   </bean>
   	   
   	   
   	   
</beans>










